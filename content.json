[{"title":"","date":"2017-02-26T10:08:04.220Z","path":"2017/02/26/WebView/","text":"&ensp; Android中实现WebView与Javascript进行交互&ensp;&ensp;在Android系统中内嵌的WebKit，这是一个浏览器内核，它帮助着我们可以浏览网页。在实际开发中，如果你想让你的App能够访问网页，那就需要用到WebView这个控件。 简单使用我们通过在Xml中引入这个控件，之后调用load()这个方法，在这个方法中传入一个Url就能正常访问一个网页了。 &lt;WebView android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:id=&quot;@+id/web&quot;&gt; 代码： WebView webView = (WebView) findViewById(R.id.web); webView.loadUrl(&quot;https://lovelyyakir.github.io&quot;); 当然不要忘了添加连网权限： &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot;/&gt; 运行在手机中 当然你一定不会满足于只能显示个网页那么简单。 进阶&ensp;&ensp;在实际使用中你会发现，有时候我们需要点击网页中的某个链接进行网页跳转，而系统会默认加载自带浏览器，而不是我们的WebView。如果你想要让WebView跳转那又该怎么做呢？&ensp;&ensp; 其实很简单，我们只需要给WebView设置一个webClient，并且重写里面的shouldOverrideUrlLoading()就能很简单的实现啦。 webView.setWebViewClient(new WebViewClient(){ @Override public boolean shouldOverrideUrlLoading(WebView view, String url) { view.loadUrl(url); return true; } }); &ensp;&ensp;谷歌工程师给我们提供了两个参数，我们需要调用load方法闯入url，并且需要在返回值中返回true。允许在本WebView中进行跳转。 &ensp;&ensp;当我们点击返回，你会发现程序退出了。当然这不是我们想要的结果。所以我们需要在Activity中重写onKeyDown(),进行判断，当我们的页面可以返回时点击返回返回上一个界面，无法返回执行其他或者退出。 @Override public boolean onKeyDown(int keyCode, KeyEvent event) { if (webView.canGoBack()&amp;&amp;keyCode==KeyEvent.KEYCODE_BACK) { webView.goBack(); return true; } return super.onKeyDown(keyCode,event); } 便是这个效果 高阶&ensp;&ensp;在实际开发中，调用webview，我们希望能与其他其他网页进行交互。非原生界面调用原生方法，原生界面调用非原生方法。（WebView与Javascript相互调用） Javascript调用Java原生代码&ensp;我们先看一段Javascript的代码 $(&quot;#test1&quot;).click(function(e){window.injs.takeFrontIDCardCamera();}); $(&quot;#test2&quot;).click(function(e){window.injs.takeBackIDCardCamera();}); $(&quot;#test3&quot;).click(function(e){window.injs.takeFaceCamera();}); 这里表示三个Javascript点击事件，window.injs.takeFaceCamera();这行代码中window表示窗口，injs表示作用域紧跟着的就是方法名了。我们需要让WebView允许和Javascript进行交互，并且绑定作用域。 webView.getSettings().setJavaScriptEnabled(true); webView.addJavascriptInterface(this,&quot;injs&quot;); 最后重写Javascript方法 @JavascriptInterface public void takeFrontIDCardCamera() { Toast.makeText(this,&quot;Native get takeFrontIDCardCamera&quot;,Toast.LENGTH_SHORT).show(); } @JavascriptInterface public void takeBackIDCardCamera() { Toast.makeText(this,&quot;Native get takeBackIDCardCamera&quot;,Toast.LENGTH_SHORT).show(); } @JavascriptInterface public void takeFaceCamera() { Toast.makeText(this,&quot;Native get takeFaceCamera&quot;,Toast.LENGTH_SHORT).show(); } Javascript调用原生方法时弹出一个土司验证 原生界面调用Javascript &ensp;这是Javascript本地方法 function jhjcardfontjs(font){ alert(font); } function jhjcardbackjs(back){ alert(back); } function jhjfacejs(face){ alert(face); } 调用无参的方法是只需要在webview的load方法中写入javascript:你的方法()。像这样: webView.loadUrl(&quot;javascript:jhjcardfontjs()&quot;); 如果有参数要注意，脚本中会有转义符需要处理一下再传入 String var=&quot;&quot;; var=var.replaceAll(&quot;\\\\\\\\&quot;, &quot;\\\\\\\\\\\\\\\\&quot;); webView.loadUrl(&quot;javascript:jhjcardfontjs(&apos;&quot; + var + &quot;&apos;)&quot;); 其他 &ensp;如果你在JavaScript中调用原生方法修改Ui,你需要确保这个方法执行在主线程。这是由于JavaBridge并不在主线程中。（hander,runOnUiThread….）","tags":[]},{"title":"很高兴与你相遇","date":"2017-02-23T16:47:48.095Z","path":"2017/02/24/hello-world/","text":"欢迎来到我的博客，查看我以前的博客请到 这里! 当然你也可以在我的 GitHub找到我。","tags":[]}]